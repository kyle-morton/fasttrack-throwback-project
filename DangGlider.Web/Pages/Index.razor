@page "/"

@using DangGlider.Web.Core.Dto
@using Microsoft.AspNetCore.SignalR.Client

<PageTitle>Index</PageTitle>

<h5>Flights: @flights.Count</h5>
<p>Current Time: @currentTime.ToString("MM/dd/yyyy hh:mm tt")</p>

    <table class="table">
        <thead>
            <tr>
                <th>Number</th>
                <th>Origin</th>
                <th>Destination</th>
                <th>Departure</th>
                <th>Arrival</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var flight in flights)
            {
                <tr>
                    <td>@flight.Id</td>
                    <td>@flight.Origin.City, @flight.Origin.State</td>
                    <td>@flight.Destination.City, @flight.Destination.State</td>
                    <td>
                        <span class="d-block">
                            @flight.ScheduledDeparture
                        </span>
                        @if (flight.HasDeparted)
                        {
                            <span class="badge bg-success">
                                Departed
                            </span>
                        }
                    </td>
                    <td>
                        <span class="d-block">
                            @flight.ScheduledArrival
                        </span>
                        @if (flight.HasArrived)
                        {
                            <span class="badge bg-success">
                                Arrived
                            </span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

@code {
    private HubConnection hubConnection;

    public List<FlightDto> flights;
    public DateTime currentTime = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7007/hubs/flight")
            .Build();

        hubConnection.On<FlightDto>("OnCreate", (flight) =>
        {
            flights.Add(flight);
            StateHasChanged();
        });

        hubConnection.On<int>("OnDeparture", (flightId) =>
        {
            var flight = flights.FirstOrDefault(f => f.Id == flightId);
            if (flight != null)
            {
                flight.HasDeparted = true;
                StateHasChanged();
            }
        });

        hubConnection.On<int>("OnArrival", (flightId) =>
        {
            var flight = flights.FirstOrDefault(f => f.Id == flightId);
            if (flight != null)
            {
                flight.HasDeparted = true;
                flight.HasArrived = true;
                StateHasChanged();
            }
        });

        hubConnection.On<DateTime>("OnTimeUpdate", (updatedTime) =>
        {
            currentTime = updatedTime;
            StateHasChanged();
        }); 

        flights = new List<FlightDto>();
        await hubConnection.StartAsync();
    }
}